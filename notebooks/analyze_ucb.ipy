# %%
import numpy as np
import pandas as pd

import plotly.graph_objects as go
from plotly.subplots import make_subplots
from bayesmark.sklearn_funcs import SklearnModel

from scipy.stats import norm

from brown_box.cost_functions import ucb_real, poi_real, ei_real
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.gaussian_process.kernels import Matern, RBF, RationalQuadratic, ExpSineSquared
from brown_box.utils import DiscreteKernel, HyperTransformer

from numpy.random import RandomState
from plot_utils.pyplot_plots import plot_GP, plot_suggestions
# %%
%%javascript
//hack to fix export
require.config({
  paths: {
    d3: 'https://cdnjs.cloudflare.com/ajax/libs/d3/5.9.2/d3',
    jquery: 'https://code.jquery.com/jquery-3.4.1.min',
    plotly: 'https://cdn.plot.ly/plotly-latest.min'
  },

  shim: {
    plotly: {
      deps: ['d3', 'jquery'],
      exports: 'plotly'
    }
  }
});
# %%[markdown]
# ## Define problem
# We have selected `ada` optimizer on dataset `wine` with `nll` metric.
# Optimizer was selected with respect to number of hyperparameters (althought it is slower to evaluate)
# %%
rnd = RandomState(seed=42)
np.random.seed(42)
problem = SklearnModel(
    "ada", "wine", "nll", data_root="/mnt/workspace/output/run_fixed"
)
tr = HyperTransformer(problem.api_config)
# %%[markdown]
# ## Step 1 (initialize with random data)
# %%
suggestions_real = tr.random_continuous(40, rnd)
_suggestions = tr.to_hyper_space(suggestions_real)
suggestions = [
    dict(zip(_suggestions, (int(e), l[0])))
    for e, l in zip(*_suggestions.values())
]
responses = []
for suggestion in suggestions:
    responses.append(problem.evaluate(suggestion))
responses = np.asarray(responses)
visible_to_opt = responses[:, 0]
generalization = responses[:, 1]
# %%
gp = GaussianProcessRegressor(
    kernel=DiscreteKernel(Matern(length_scale=[50.0, 50.25], nu=2.5), tr),
    alpha=1e-10,
    normalize_y=True,
    n_restarts_optimizer=5,
    random_state=rnd,
)
gp.fit(suggestions_real, visible_to_opt)
fig = make_subplots(rows=2, cols=2, subplot_titles=["Mean GP", "Std GP", "EI", "POI"])
n_pixels=250
_n_estimators = np.linspace(tr._lb[0], tr._ub[0], n_pixels)
_learning_rates = np.logspace(tr._lb[1], tr._ub[1], n_pixels)

_X = np.column_stack(
    [
        np.tile(_n_estimators, n_pixels),
        np.repeat(np.log10(_learning_rates), n_pixels),
    ]
)
_y,_std = gp.predict(_X, return_std=True)
min_y = min(visible_to_opt)
xi = 1.0
mean = _y.reshape(n_pixels, n_pixels)
std = _std.reshape(n_pixels, n_pixels)
ucb = mean - 2.6*std
a = (mean + min_y + xi)
z = a / std
poi = norm.cdf(z)
ei = a * norm.cdf(z) - std * norm.pdf(z)
custom_data = np.dstack([mean, std, ei, poi])
fig.add_trace(go.Heatmap(
    x=_n_estimators,
    y=_learning_rates,
    z=mean,
    customdata=custom_data,
    hovertemplate='mean:%{customdata[0]:.3f}<br>std:%{customdata[1]:.3f}<br>ucb:%{customdata[2]:.3f}<br>poi:%{customdata[3]:.3f}',
    opacity=1.0,
    colorscale="RdBu",
), row=1, col=1)
sg_trace = plot_suggestions(suggestions, visible_to_opt)
fig.add_trace(sg_trace, row=1,col=1)

fig.add_trace(go.Heatmap(
    x=_n_estimators,
    y=_learning_rates,
    z=std,
    customdata=custom_data,
    hovertemplate='mean:%{customdata[0]:.3f}<br>std:%{customdata[1]:.3f}<br>ucb:%{customdata[2]:.3f}<br>poi:%{customdata[3]:.3f}',
    opacity=1.0,
    colorscale="RdBu",
), row=1, col=2)
fig.add_trace(sg_trace, row=1,col=2)

fig.add_trace(go.Heatmap(
    x=_n_estimators,
    y=_learning_rates,
    z=ei,
    customdata=custom_data,
    hovertemplate='mean:%{customdata[0]:.3f}<br>std:%{customdata[1]:.3f}<br>ucb:%{customdata[2]:.3f}<br>poi:%{customdata[3]:.3f}',
    opacity=1.0,
    colorscale="RdBu",
), row=2, col=1)
fig.add_trace(sg_trace, row=2,col=1)

fig.add_trace(go.Heatmap(
    x=_n_estimators,
    y=_learning_rates,
    z=poi,
    customdata=custom_data,
    hovertemplate='mean:%{customdata[0]:.3f}<br>std:%{customdata[1]:.3f}<br>ucb:%{customdata[2]:.3f}<br>poi:%{customdata[3]:.3f}',
    opacity=1.0,
    colorscale="RdBu",
), row=2, col=2)
fig.add_trace(sg_trace, row=2,col=2)

fig.update_layout(width=1600, height=1600)
fig.update_xaxes(title_text='n_estimators', range=(tr._lb[0], tr._ub[0]))
fig.update_yaxes(title_text='learning_rate',type="log", range=(tr._lb[1], tr._ub[1]))
fig.show()
# %%
